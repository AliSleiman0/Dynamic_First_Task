basePath: /api
definitions:
  handlers.LoginRequest:
    properties:
      id:
        type: integer
      pass:
        type: string
    type: object
  handlers.SignupRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  models.Book:
    properties:
      genre:
        type: string
      id:
        type: integer
      img_url:
        type: string
      published_year:
        type: integer
      publisher:
        $ref: '#/definitions/models.User'
      publisher_id:
        description: Foreign Key
        type: integer
      quantity:
        type: integer
      title:
        type: string
    type: object
  models.User:
    properties:
      books:
        items:
          $ref: '#/definitions/models.Book'
        type: array
      createdAt:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      img_src:
        type: string
      last_name:
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: This is a sample API for a bookstore.
  title: Bookstore API
  version: "1.0"
paths:
  /books:
    get:
      description: Retrieve all books from the store
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Add a new book to the store
      parameters:
      - description: Book Data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Book'
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    get:
      description: Retrieve a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get book by ID
      tags:
      - books
  /books/{id}/checkin:
    post:
      description: Increase the quantity of a book by 1
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Checkin a book
      tags:
      - books
  /books/{id}/checkout:
    post:
      description: Decrease the quantity of a book by 1
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Checkout a book
      tags:
      - books
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user by ID and password, returning an access token
      parameters:
      - description: User ID and Password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Login a user
      tags:
      - auth
  /signup:
    post:
      consumes:
      - application/json
      description: Create a new user account, hash the password, and return access
        and refresh tokens
      parameters:
      - description: User Signup Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.SignupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /users:
    get:
      description: Retrieve all users from the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get all users
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user's information
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a user
      tags:
      - users
  /users/{id}:
    get:
      description: Retrieve a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user by ID
      tags:
      - users
swagger: "2.0"
