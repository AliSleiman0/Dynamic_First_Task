package main

import (
	"log"

	"first_task/go-fiber-api/internal/db"
	"first_task/go-fiber-api/internal/handlers"
	"first_task/go-fiber-api/internal/middleware"
	"first_task/go-fiber-api/internal/models"
	repo "first_task/go-fiber-api/internal/repository"
	"first_task/go-fiber-api/internal/services"
	utils "first_task/go-fiber-api/pkg"

	_ "first_task/go-fiber-api/docs" // docs is generated by swag

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	fiberSwagger "github.com/swaggo/fiber-swagger"
)

// @title Bookstore API
// @version 1.0
// @description This is a sample API for a bookstore.
// @host localhost:3000
// @BasePath /api
func main() {
	// load config (JWT secret, TTL, etc.)
	cfg := utils.LoadConfig()

	database, err := db.InitDB()
	if err != nil {
		panic("Failed to connect to database")
	}

	database.AutoMigrate(&models.Book{}, &models.User{})

	bookRepo := &repo.BookRepo{DB: database}
	userRepo := &repo.UserRepo{DB: database}

	bookService := services.NewBookService(bookRepo)
	userService := services.NewUserService(userRepo)

	tokenService := services.NewTokenService(cfg.JWTSecret, cfg.JWTTTL, "my-go-api")

	bookHandler := handlers.NewBookHandler(bookService)
	userHandler := handlers.NewUserHandler(userService)

	authHandler := handlers.NewAuthHandler(tokenService, userService)

	app := fiber.New(fiber.Config{
		AppName: "MyFiberApp",
	})
	app.Use(logger.New())

	app.Get("/health", func(c *fiber.Ctx) error {
		return c.SendString("ok")
	})
	app.Get("/swagger/*", fiberSwagger.WrapHandler)

	api := app.Group("/api")

	//JWT middleware
	jwtMiddleware := middleware.NewJWT(cfg.JWTSecret)

	api.Post("/signup", userHandler.Signup)
	api.Post("/login", authHandler.Login)

	books := api.Group("/books", jwtMiddleware)
	//books := api.Group("/books")
	books.Post("/", bookHandler.CreateBook)
	books.Get("/", bookHandler.GetAllBooks)
	books.Get("/:id", bookHandler.GetBookByID)
	books.Post("/:id/checkin", bookHandler.Checkin)
	books.Post("/:id/checkout", bookHandler.Checkout)

	users := api.Group("/users")
	//usersProtected := users.Group("")
	usersProtected := users.Group("", jwtMiddleware)
	usersProtected.Get("/", userHandler.GetAllUsers)
	usersProtected.Get("/:id", userHandler.GetUserByID)
	usersProtected.Put("/:id", userHandler.UpdateUser)
	users.Post("/", userHandler.CreateUser) //foradmins
	//start server
	log.Fatal(app.Listen(":3000"))
}
